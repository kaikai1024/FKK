由于shell主要是字符串处理语言，所以可以利用shell变量对字符串作很多事。
变量和算术：Shell变量除了用来保存某个值，Shell脚本和函数还有位置参数的功能，（命令行参数）
export：修改或打印（-p）环境变量;readonly：使变量不得修改;
环境是一个名称和值的简单列表，可供所有执行中的程序使用。新的进程从父进程继承环境，也可以在建立新的子进程之前修改它。
env也可临时改变环境变量-i选项用来初始化环境变量的，也就是丢弃任何的继承值仅传递命令行上指定的变量给程序使用
unset：从执行的Shell中删除变量和函数-v：删除变量;-f：删除函数
参数展开：是Shell提供变量值在程序中使用的过程
替换运算符：
  ${varname:-word}:如果变量为定义，则返回默认值
  ${varname:=word}:如果变量为定义，则设置变量为默认值
  ${varname:？message}:为了捕捉由于变量未定义所导致的错误
  ${varname:+word}:测试变量的存在（存在返回word）
  ${variable#pattern}:如果模式匹配于变量值的开头处，则删除匹配的最短部分，并返回剩下的
  ${variable##pattern}:如果模式匹配于变量值的开头处，则删除匹配的最长部分，并返回剩下的
  ${variable%pattern}:如果模式匹配于变量值的结尾处，则删除匹配的最短部分，并返回剩下的
  ${variable%pattern}:如果模式匹配于变量值的结尾处，则删除匹配的最长部分，并返回剩下的
位置参数：Shell脚本的命令行参数，同时也表示在Shell函数内的函数参数。名称以单个的整数来命名，大于9用{}括起来。
  $#:提供传递到Shell脚本或函数的参数总数
  $*,$@:一次表示所有的命令行参数
  shift命令是用来截去来自列表的位置参数，由左开始。shift也可选一个可选的参数，也就是要位移的参数的计数。
Shell有很多内置的额外变量：
  #：目前进程参数个数
  @：传递给当前进程的命令行参数。置于双引号内，会展开为个别的参数
  *:当前进程的命令行参数，置于双引号内，则展开为一单独参数。
  -：在引用时给予Shell的选项
  ？：前一命令的退出状态
  $：Shell进程的进程编号
  0：Shell进程的名称
  ！：最近一个后台命令的进程编号。以此方式存储进程编号，可通过wait命令以供稍后使用
  ENV：一旦引用，则仅用于交互式Shell中，
  HOME：根目录
  IFS：内部的字段分割器
  LANG：当前locale的默认名称
  LC_ALL：当前locale的 名称，
  LC_COLLATE:用来排序字符的当前locale名称
  LC_CTYPE：在模式匹配期间，用来确定字符类别的当前locale的名称
  LC_MESSAGE:输出信息的当前语言的名称
  LINENO：刚执行过的行在脚本或函数内的行编号
  NLSPATH：在$LC_MESSAGE(XSI)所给定的信息语言中，信息目录的位置
  PATH：命令的查找路径
  PPID：父进程的进程编号
  PS1：主要的命令提示字符串，默认位$
  PS2:行继续的提示字符串，默认>
  PS4:以set -x设置的执行跟踪的提示字符串。默认+
  PWD：当前工作目录
  特殊变量$$可在编写脚本的时候用来建立具有唯一性的文件名（多半是临时的），这是根据shell的进程编号建立文件名mktmp
  算数展开：
  与c相似，非零值都为真
  退出状态：每一条命令退出时，都会返回一个小整数给引用它的程序。$?包括了最近一次所执行的一个程序的退出状态。
    0：命令成功退出
    >0:在重定向或单词展开期间失败
    1-125：命令不成功退出
    126：命令找到了，但文件没有找到
    127：命令找不到
    >128:命令因收到信号而死亡
exit ：传递一个值给他的调者
if-elif-else-if
逻辑的！ && ||
test：产生可使用的退出状态。用来测试文件属性，比较字符串、数字
  所有的Shell变量展开都应该以引号括起来，这样test才能接收一个参数——即使它已变成null字符串
  在字符串值前置字X
  不能作任何的符点数算数运算
case：esac之前的；；
for,while,until,break,continue
getopts???????
函数在使用之前必须先定义。这可通过在脚本的起始处，或是将他们放在另一个独立文件里且以点号.命令来取用（source）。
在函数体中，位置参数（$1,$2,..$#,$*,$@）都是函数的参数。父脚本的参数则临时的被函数参数所掩盖，$0依旧是父脚本的名称。
return，（exit会终止整个脚本）
