awk语言程序的设计就是为简化一般文本处理的工作。
awk命令行;
一个awk程序是以一对以模式（patteen）与大括号框起来的操作（action）组合而成的。
awk并无特殊的字符串连续运算符，也就是两个连续字符串，会自动的连接在一起。字符串不需要是常数。
将数字转换为字符串，通过数字连接空字符串即可。
两个运算符：～（匹配），！～（不匹配）
所有awk里面的数字都以双精确度的符点值表示。
只要加个0到字符串里就可以字符串转数字。
保存单一值的变量叫做标量变量。变量无需先声明。
所有的awk变量在建立时其初始值为一个空字符串值，当需要数值时，被视为零。
变量与大小写有关，将局部变量全设为小写，全局变量第一个字母位大写，内建变量全是大写。
以任意值为索引的数组称之为关联数组，因为它们的名称与值是相关联的。
awk的数组无需声明也无需配置：数组的存储空间在引用新元素时会自动增长。数组的存储空间是稀疏的：只有那些确被引用到的元素
  才会配置。
一个变量不能同时用作标量变量和数组变量。当用delete语句删除数组的元素时，不会删除它的名称  。
awk通过将“以逗号分隔的索引列表”看作一个字符串，而使用多个索引模拟数组。然而由于
	逗号本身以可能出现在索引值内，因此awk使用存储在内建变量SUBSEP里的无法打印
	字符串取代索引分隔字符。
命令行参数。ARGC（参数计数）ARGV（参数向量，或参数值）
内建标量变量：
	FILENAME：当前输入文件的名称
	FNR：当前输入文件的记录数
	FS：字段分隔字符（正则表达式）（默认为；“ ”）
	NF：当前记录的字段数
	NR：在工作（job）中的记录数
	OFS：输出字段分隔字符（默认为：“ ”）
	ORS：输出记录分割字符（默认为：“\n”）
	RS：输入记录分隔字符（“\n”）
awk提供访问内建数组ENVIRON中所有的环境变量。只读数组。
记录与字段：record field
RS;FS
使用正则表达式记录分隔字符时，匹配分隔字符的文本不再由RS值来决定。
FS的默认值为单一空格，它接受特殊的解释方式：一个或多个空白字符以及行的开头与
	结尾的空白都将被忽略。
FS只有在它超过一个字符时，才会被视为正则表达式。
字段可以特殊名称$1、$2...、$NF 供程序使用。
特殊字段名称$0引用到当前记录，初始值从输入流中读取，且记录分隔字符不是记录的
	一部分。
模式与操作：
模式由字符串与/或数值表达式构建而成：一旦他们计算出当前输入记录的值位非零（真）
	则实行结合性的操作。
操作：标明了如何处理该记录。
改变输出字段分隔字符而没有指定任何字段，不会改变$0.
awk里的单行程序：
语句：
连续的执行是以一个语句一行或以分号隔开的方式，提供一串语句列表。
数组成员的测试：成员测试key in array 是一个表达式：如果key为array的一个索引
	元素，则计算为1。
用户控制的输入：
awk直接处理命令行上标明的输入文件，意指绝大多数的awk程序都不必自己打开与处理文件它可以通过awk的getline语句作这件事。
输出冲定向：>  为了附加到已存在的文件>>
执行外部程序：
getline语句以及awk管道里的输出重定向都可与外部程序通信。system(command)函数
	提供的是第三种方式：其返回值为命令的退出状态码。
	首先它会清除所有缓冲区输出，然后开始一个/bin/sh实例并将命令送给它。
用户定义函数：所有用于函数体且未出现在参数列表中的变量，都被视为全局性的
awk允许在被调用函数中的参数比函数定义里所声明的参数还要少，额外的参数会被视为
	局部变量。这类变量一般都用的到，所以惯例上是将他们列在函数参数列表中，并
	在字首前置一些额外的空白。
字符串函数：
length（string）;
substr(string, strat, len):	提取字符串
tolower(string);toupper(string):大小写转换
index(string, find):字符串查找
match(string, regexp):将string与正则表达式regexp匹配。
sub(regexp, replacement, target);gsub(regexp, replacement, target):替换
split(string, array, regexp):切割
字符串重建join
sprintf(format, expression1, expression2, ...):字符串格式化，它会返回已格式化
	的字符串作为其函数值。
数值函数：
irand
