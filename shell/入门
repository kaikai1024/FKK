who：系统都有谁在登录
wc：（字数计算程序）可以算出行数（line）、字数（word）与字符数（character）：who | wc -l
|（管道）符号可以在两程序之间建立管道（pipeline）：who的输出成了wc的输入。
cat > 文件名：建立文件，使用cat复制终端的输入
ctr-D表示end-of-file
chmod +x 文件名：让文件用于执行的权限
./文件名：执行测试
小型Shell脚本的典型开发周期：首先，直接在命令行（command line）上测试，然后一旦找到能够完成工作的适当语法，再将它们
放进一个独立的脚本，并为脚本设置执行的权限，之后就能直接使用脚本。
～
第一行的开头两个字符#！，内核会扫描该行的其余部分，看是否存在可用来执行程序的解释器的完整路径，此外内核还会扫描有一个
选项要传递给解释器。
命令：
首先，以空白隔开命令行中各个组成部分;其次，命令名称是命令行的第一个项目;三，选项的开头是一个破折号后面跟着一个字母。
最后，分号可用来分割同一行里的多个命令。若是&则shell将在后台执行前面的命令。
1.内建命令：由shell本身所执行的命令。cd;read;test;echo;printf
2.shell函数是功能健全的一系列程序代码，以shell语言写成，可以像命令哪样引用。
3.外部命令是由shell的副本（新的进程）所执行的命令。
～
变量可以是空值即为null。可用来保存字符串值，所能保存的字符数没有限制，
$变量名：取出变量的值;单行可进行多次赋值，值中包含空格时使用引号;
echo：产生Shell脚本的输出;echo [string]
echo的转义序列：
\a:警示字符
\b:退格
\c：输出中忽略最后的换行字符
\f：清楚屏幕（Formfeed）
\n：换行
\r：回车
\t：水平制表符
\v：垂直制表符
\\：反斜杠字符
\0ddd：将字符表示成1到3位的八进制数值
printf命令;
基本的IO重定向：
程序应该有数据的来源、数据的目的端及报告问题的地方，分别被称为标准输入、标准输出以及标准错误输出。
IO重定向就是通过与终端交互或是在Shell脚本里设置，重新安排从哪里输入或输出到哪里。
以 < 改变标准输入;  以 > 改变标准输出;  以>>附加到文件；  以|建立管道
tr：转换字符
  常用选项：-c：转换未列在source-char-list中的字符
            -C：处理的是字符非二进制的字节值
            -d：删除
            -s：浓缩为一个
特殊文件：
/dev/null：位桶（bit bucker）传送到此文件的数据都会被系统丢掉;
/dev/tty：当程序打开此文件时，系统会自动将它重定向到一个终端再与程序结合
stty（set tty）命令用来控制终端。-echo选项用来关闭自动打印每个输入字符的功能;stty echo恢复;
bin：此目录用来保存可执行文件;
$PATH里的空项目表示当前目录;.profile将个人的bin目录列入PATH中;
    PATH=$PATH:$HOME/bin将个人的bin目录附加到PATH
位置参数指的是Shell脚本的命令行参数。
grep命令用来查找操作。它会找出与第一个参数匹配的每一行;
执行跟踪：sh -x 名称;每个执行到的命令前面一个+和一个空格;
在脚本里，用set -x命令将执行跟踪的功能打开，set +x命令关闭;
国际化和本土化;


