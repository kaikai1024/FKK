read：将命令传递给shell;-r：原始读取，不将行尾的反斜杠解释为续行字符
如果输入单词多于变量时，最后剩余的单词全部被指定给最后一个变量，理想的行为应转义这个法则：是用read搭配单一变量，将一整行的输入都读取到该变量中。
关于重定向：
set -C：可打开Shell所谓的禁止覆盖（noclobber）选项，当它在打开状态下，单纯的>重定向遇到目标文件已存在时，就会失败。>|会让noclobber选项失效
<< <<-: 使用program << delimiter,可以在Shell脚本正文内提供输入数据，这样的数据叫做嵌入式文件。
如果定界符以任何一种形式的引号括起来，Shell便不会处理输入的文本
以<>打开一个文件作为输入与输出之用，可供读取和写入。
文件描述符处理：
在系统内部，UNIX是以一个小的整数数字，称为文件描述符，表示每个进程的打开文件。
文件描述符0,1，2 各自对应到标准输入、标准输出以及标准错误输出。
～～～Managing Projects with GNU make~~~~
exec：改变shell本身I/O设置。以新的程序取代shell或改变shell本身的io设置
printf：
转义序列;
格式指示符：%b：相对应的参数被视为含有要被处理的转义序列之字符串。
可以指定输出字段的宽度以及进行对齐操作。默认向右，加-向左;
精度.
	-：向左对齐
	空白（space）：在正值前置一个空格，在负值前置一个负号
	+：总是在数值之前放置一个正号或负号，
	#：%o有一个前置的O，%x和%X分别前置Ox和OX。。
	0：以零填补输出而非空白
波浪号展开和通配符：
波浪号展开的目的是要用户根目录的符号型表示方法，改为实际的目录路径。
通配符：
	？：任何的单一字符
	*:任何的字符字符串
	[set]：任何在set里面的字符
	[!set]:任何不再set里面的字符
命令替换：是指Shell执行命令并将命令替换部分替换为执行该命令后的结果。
	1.反引号`将要执行的命令框起来。
	2.将命令括在$(..)里。
head可指明行数作为选项。
