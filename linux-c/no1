gcc编译器：
	-o：要求输出可执行文件名
	-c：要求编译器输出目标代码，而不必要输出可执行文件
	-g：要求编译器编译的时候提供我们以后对程序进行调试的信息。
Makefile的编写：
	最重要的是描述文件的依赖关系的说明：
	target: components
	TAB rule
	第一行表示的是依赖关系，第二行是规则。
	Makefile有三个有用的变量：
	$@--目标文件$^--所有的依赖文件$<--第一个依赖文件
	Makefile 的缺省规则：
	..c.o:
	gcc -c $<
	这个规则表示所有的.o文件都是依赖与相应的.c文件的。
程序库的链接：
	对于一些常用的函数的实现，gcc编译器会自动去连接一些常用库。有时候我们在
	编译程序的时候还要指定库的路径，这个时候要用-L选项指定路径。
	系统的缺省库的路径/lib /usr/lib /usr/local/lib 可以不指定路径。
调试：gdb; xxgdb
头文件和系统求助：
	man function
	2表示我们用的函数是系统调用函数，3表示函数是c的库函数。
进程的概念：
	程序是一个包含可以执行代码的文件是静态的，进程是一个开始执行但还没有
	结束的程序的实例，就是可执行文件的具体实现。
	系统给每个进程分配一个ID
	进程分为新建、运行、阻塞、就绪和完成五个状态。
进程的标志：
	系统调用getpid可以得到进程的ID，而getppid可以得到父进程（创建调用该函数
	进程的进程）的ID。#include<unistd>
	getuid可以得到进程的所有者的ID。geteuid可以得到进程的有效用户ID。
	getgid和getegid可以得到组ID和有效组ID。
	getpwuid可以得到用户的其他信息。

进程的创建：
pid_t fork();
为了区分父进程和子进程，必须跟踪fork的返回值。失败返回-1,父进程fork返回子进程的
ID,fork子进程返回0;
wait系统调用会使父进程阻塞直到一个子进程结束或者是父进程接受了一个信号。
waitpid等待指定的子进程直到子进程返回。
守护进程的创建：
我们只要在命令后面加上&符号SHELL就会把我们的程序放到后台去运行。
后台进程的创建思想：首先父进程创建一个子进程然后子进程杀死父进程。信号处理所有
的工作由子进程来处理。
文件的操作：
